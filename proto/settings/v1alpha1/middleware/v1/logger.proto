edition = "2023";
package settings.v1alpha1.middleware.v1;

option go_package = "github.com/atlanticdynamic/firelynx/gen/settings/v1alpha1/middleware/v1";

message LogOptionsGeneral {
  enum Format {
    FORMAT_UNSPECIFIED = 0;
    FORMAT_TXT = 1;
    FORMAT_JSON = 2;
  }

  enum Level {
    LEVEL_UNSPECIFIED = 0;
    LEVEL_DEBUG = 1;
    LEVEL_INFO = 2;
    LEVEL_WARN = 3;
    LEVEL_ERROR = 4;
    LEVEL_FATAL = 5;
  }

  // Log output format
  // env_interpolation: n/a (non-string)
  Format format = 1 [default = FORMAT_UNSPECIFIED];

  // Minimum log level
  // env_interpolation: n/a (non-string)
  Level level = 2 [default = LEVEL_UNSPECIFIED];
}

message LogOptionsHTTP {
  // Configuration for what gets logged for request or response
  message DirectionConfig {
    // Whether to log this direction at all
    // env_interpolation: n/a (non-string)
    bool enabled = 1 [default = true];

    // Include the full body content
    // env_interpolation: n/a (non-string)
    bool body = 2;

    // Body content larger than this will be truncated (0 for no limit)
    // env_interpolation: n/a (non-string)
    int32 max_body_size = 3;

    // Include the size of the body in bytes
    // env_interpolation: n/a (non-string)
    bool body_size = 4;

    // Include headers
    // env_interpolation: n/a (non-string)
    bool headers = 5;

    // If set, only log these headers (e.g., ["Authorization", "X-Request-ID"])
    // env_interpolation: yes
    repeated string include_headers = 6;

    // Headers to exclude from logging (e.g., ["Cookie", "Set-Cookie"])
    // env_interpolation: yes
    repeated string exclude_headers = 7;
  }

  // Common fields available for any HTTP log entry
  // Include HTTP method (GET, POST, etc.)
  // env_interpolation: n/a (non-string)
  bool method = 100 [default = true];

  // Include request path
  // env_interpolation: n/a (non-string)
  bool path = 101 [default = true];

  // Include client IP address
  // env_interpolation: n/a (non-string)
  bool client_ip = 102;

  // Include query string parameters
  // env_interpolation: n/a (non-string)
  bool query_params = 103;

  // Include protocol version (HTTP/1.1, HTTP/2, etc.)
  // env_interpolation: n/a (non-string)
  bool protocol = 104;

  // Include host from request (may differ from Host header)
  // env_interpolation: n/a (non-string)
  bool host = 105;

  // Include request scheme (http, https)
  // env_interpolation: n/a (non-string)
  bool scheme = 106;

  // Response-specific fields (only available when response is present)
  // Include HTTP response status code
  // env_interpolation: n/a (non-string)
  bool status_code = 107 [default = true];

  // Include request processing time (only meaningful for response logging)
  // env_interpolation: n/a (non-string)
  bool duration = 108;

  // What to log for request and response
  // What to log for requests
  // env_interpolation: n/a (non-string)
  DirectionConfig request = 109;

  // What to log for responses
  // env_interpolation: n/a (non-string)
  DirectionConfig response = 110;
}

// Configuration for console logger middleware
message ConsoleLoggerConfig {
  // Preset configuration bundles for common logging scenarios
  enum LogPreset {
    PRESET_UNSPECIFIED = 0;
    PRESET_MINIMAL = 1; // Only method, path, status code
    PRESET_STANDARD = 2; // Minimal + client IP, duration
    PRESET_DETAILED = 3; // Standard + headers, query params
    PRESET_DEBUG = 4; // Everything including request/response bodies
  }

  // General logging options (format, level)
  // env_interpolation: n/a (non-string)
  LogOptionsGeneral options = 1;

  // HTTP-specific field selection and formatting
  // env_interpolation: n/a (non-string)
  LogOptionsHTTP fields = 2;

  // Output destination (supports environment variable interpolation with ${VAR_NAME})
  // Examples: "stdout", "stderr", "/var/log/app.log", "file:///var/log/app-${HOSTNAME}.log"
  // env_interpolation: yes
  string output = 3 [default = "stdout"];

  // Preset configuration (applied before custom field overrides)
  // env_interpolation: n/a (non-string)
  LogPreset preset = 4 [default = PRESET_UNSPECIFIED];

  // Path filtering - paths are matched as prefixes
  // If set, only log requests matching these path prefixes
  // env_interpolation: yes
  repeated string include_only_paths = 5;

  // Exclude requests matching these path prefixes (e.g., "/health", "/metrics")
  // env_interpolation: yes
  repeated string exclude_paths = 6;

  // Method filtering
  // If set, only log these HTTP methods (e.g., ["GET", "POST"])
  // env_interpolation: yes
  repeated string include_only_methods = 7;

  // Exclude these HTTP methods from logging (e.g., ["OPTIONS"])
  // env_interpolation: yes
  repeated string exclude_methods = 8;
}

edition = "2023";

package settings.v1alpha1;

import "settings/v1alpha1/settings.proto";
import "settings/v1alpha1/transaction.proto";

option go_package = "github.com/atlanticdynamic/firelynx/gen/settings/v1alpha1";

// ConfigService provides the ability to update server configuration
service ConfigService {
  // ValidateConfig checks if the provided configuration is valid, but does not activate it.
  rpc ValidateConfig(ValidateConfigRequest) returns (ValidateConfigResponse);

  // UpdateConfig checks if the provided configuration is valid and, if so, loads it as the active configuration.
  rpc UpdateConfig(UpdateConfigRequest) returns (UpdateConfigResponse);

  // GetConfig retrieves the current server configuration.
  rpc GetConfig(GetConfigRequest) returns (GetConfigResponse);

  // GetCurrentConfigTransaction retrieves the current configuration transaction.
  rpc GetCurrentConfigTransaction(GetCurrentConfigTransactionRequest) returns (GetCurrentConfigTransactionResponse);

  // ListConfigTransactions retrieves the history of configuration transactions.
  rpc ListConfigTransactions(ListConfigTransactionsRequest) returns (ListConfigTransactionsResponse);

  // GetConfigTransaction retrieves a specific configuration transaction by ID.
  rpc GetConfigTransaction(GetConfigTransactionRequest) returns (GetConfigTransactionResponse);

  // ClearConfigTransactions clears the history of configuration transactions.
  rpc ClearConfigTransactions(ClearConfigTransactionsRequest) returns (ClearConfigTransactionsResponse);
}

// ValidateConfigRequest is used to validate a server configuration
message ValidateConfigRequest {
  ServerConfig config = 1; // The configuration to validate
}

// ValidateConfigResponse indicates whether the configuration is valid
message ValidateConfigResponse {
  bool valid = 1; // True if the configuration is valid
  string error = 2; // Error message if the configuration is invalid
}

// Request to update the server configuration
message UpdateConfigRequest {
  ServerConfig config = 1;
}

// Response to an update configuration request
message UpdateConfigResponse {
  bool success = 1;
  string error = 2;
  ServerConfig config = 3; // Returns the active configuration after update
  string transaction_id = 4; // ID of the transaction
}

// Request to get the current server configuration
message GetConfigRequest {}

// Response to a get configuration request
message GetConfigResponse {
  ServerConfig config = 1;
}

// Request to get the current configuration transaction
message GetCurrentConfigTransactionRequest {}

// Response containing the current configuration transaction
message GetCurrentConfigTransactionResponse {
  ConfigTransaction transaction = 1; // The current configuration transaction, null if none exists
}

// ListConfigTransactionsRequest is used to retrieve the history of configuration transactions
message ListConfigTransactionsRequest {
  string page_token = 1; // Token to retrieve a specific page of results
  int32 page_size = 2 [default = 10]; // Number of transactions per page
  string state = 3; // Optional filter to retrieve transactions in a specific state
  string source = 4; // Optional filter to retrieve transactions from a specific source
}

// ListConfigTransactionsResponse contains the history of configuration transactions
message ListConfigTransactionsResponse {
  repeated ConfigTransaction transactions = 1; // List of configuration transactions
  string next_page_token = 2; // Token for retrieving the next page of results (empty if last page)
}

// GetConfigTransactionRequest is used to retrieve a specific configuration transaction by ID
message GetConfigTransactionRequest {
  string transaction_id = 1; // ID of the transaction to retrieve
}

// GetConfigTransactionResponse contains the details of a specific configuration transaction
message GetConfigTransactionResponse {
  ConfigTransaction transaction = 1; // The requested configuration transaction
}

// ClearConfigTransactionsRequest is used to clear the history of configuration transactions which are in terminal state
message ClearConfigTransactionsRequest {
  int32 keep_last = 1 [default = 0]; // Number of transactions to keep, 0 means clear all except current
}

// ClearConfigTransactionsResponse indicates the result of clearing configuration transactions
message ClearConfigTransactionsResponse {
  bool success = 1; // True if the history was cleared successfully
  string error = 2; // Error message if the operation failed
  int32 cleared_count = 3; // Number of transactions cleared
}

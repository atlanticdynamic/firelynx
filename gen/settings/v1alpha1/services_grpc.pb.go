// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: settings/v1alpha1/services.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ConfigService_ValidateConfig_FullMethodName              = "/settings.v1alpha1.ConfigService/ValidateConfig"
	ConfigService_UpdateConfig_FullMethodName                = "/settings.v1alpha1.ConfigService/UpdateConfig"
	ConfigService_GetConfig_FullMethodName                   = "/settings.v1alpha1.ConfigService/GetConfig"
	ConfigService_GetCurrentConfigTransaction_FullMethodName = "/settings.v1alpha1.ConfigService/GetCurrentConfigTransaction"
	ConfigService_ListConfigTransactions_FullMethodName      = "/settings.v1alpha1.ConfigService/ListConfigTransactions"
	ConfigService_GetConfigTransaction_FullMethodName        = "/settings.v1alpha1.ConfigService/GetConfigTransaction"
	ConfigService_ClearConfigTransactions_FullMethodName     = "/settings.v1alpha1.ConfigService/ClearConfigTransactions"
)

// ConfigServiceClient is the client API for ConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ConfigService provides the ability to update server configuration
type ConfigServiceClient interface {
	// ValidateConfig checks if the provided configuration is valid, but does not activate it.
	ValidateConfig(ctx context.Context, in *ValidateConfigRequest, opts ...grpc.CallOption) (*ValidateConfigResponse, error)
	// UpdateConfig checks if the provided configuration is valid and, if so, loads it as the active configuration.
	UpdateConfig(ctx context.Context, in *UpdateConfigRequest, opts ...grpc.CallOption) (*UpdateConfigResponse, error)
	// GetConfig retrieves the current server configuration.
	GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigResponse, error)
	// GetCurrentConfigTransaction retrieves the current configuration transaction.
	GetCurrentConfigTransaction(ctx context.Context, in *GetCurrentConfigTransactionRequest, opts ...grpc.CallOption) (*GetCurrentConfigTransactionResponse, error)
	// ListConfigTransactions retrieves the history of configuration transactions.
	ListConfigTransactions(ctx context.Context, in *ListConfigTransactionsRequest, opts ...grpc.CallOption) (*ListConfigTransactionsResponse, error)
	// GetConfigTransaction retrieves a specific configuration transaction by ID.
	GetConfigTransaction(ctx context.Context, in *GetConfigTransactionRequest, opts ...grpc.CallOption) (*GetConfigTransactionResponse, error)
	// ClearConfigTransactions clears the history of configuration transactions.
	ClearConfigTransactions(ctx context.Context, in *ClearConfigTransactionsRequest, opts ...grpc.CallOption) (*ClearConfigTransactionsResponse, error)
}

type configServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigServiceClient(cc grpc.ClientConnInterface) ConfigServiceClient {
	return &configServiceClient{cc}
}

func (c *configServiceClient) ValidateConfig(ctx context.Context, in *ValidateConfigRequest, opts ...grpc.CallOption) (*ValidateConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateConfigResponse)
	err := c.cc.Invoke(ctx, ConfigService_ValidateConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) UpdateConfig(ctx context.Context, in *UpdateConfigRequest, opts ...grpc.CallOption) (*UpdateConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateConfigResponse)
	err := c.cc.Invoke(ctx, ConfigService_UpdateConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConfigResponse)
	err := c.cc.Invoke(ctx, ConfigService_GetConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) GetCurrentConfigTransaction(ctx context.Context, in *GetCurrentConfigTransactionRequest, opts ...grpc.CallOption) (*GetCurrentConfigTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCurrentConfigTransactionResponse)
	err := c.cc.Invoke(ctx, ConfigService_GetCurrentConfigTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) ListConfigTransactions(ctx context.Context, in *ListConfigTransactionsRequest, opts ...grpc.CallOption) (*ListConfigTransactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListConfigTransactionsResponse)
	err := c.cc.Invoke(ctx, ConfigService_ListConfigTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) GetConfigTransaction(ctx context.Context, in *GetConfigTransactionRequest, opts ...grpc.CallOption) (*GetConfigTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConfigTransactionResponse)
	err := c.cc.Invoke(ctx, ConfigService_GetConfigTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) ClearConfigTransactions(ctx context.Context, in *ClearConfigTransactionsRequest, opts ...grpc.CallOption) (*ClearConfigTransactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClearConfigTransactionsResponse)
	err := c.cc.Invoke(ctx, ConfigService_ClearConfigTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigServiceServer is the server API for ConfigService service.
// All implementations must embed UnimplementedConfigServiceServer
// for forward compatibility.
//
// ConfigService provides the ability to update server configuration
type ConfigServiceServer interface {
	// ValidateConfig checks if the provided configuration is valid, but does not activate it.
	ValidateConfig(context.Context, *ValidateConfigRequest) (*ValidateConfigResponse, error)
	// UpdateConfig checks if the provided configuration is valid and, if so, loads it as the active configuration.
	UpdateConfig(context.Context, *UpdateConfigRequest) (*UpdateConfigResponse, error)
	// GetConfig retrieves the current server configuration.
	GetConfig(context.Context, *GetConfigRequest) (*GetConfigResponse, error)
	// GetCurrentConfigTransaction retrieves the current configuration transaction.
	GetCurrentConfigTransaction(context.Context, *GetCurrentConfigTransactionRequest) (*GetCurrentConfigTransactionResponse, error)
	// ListConfigTransactions retrieves the history of configuration transactions.
	ListConfigTransactions(context.Context, *ListConfigTransactionsRequest) (*ListConfigTransactionsResponse, error)
	// GetConfigTransaction retrieves a specific configuration transaction by ID.
	GetConfigTransaction(context.Context, *GetConfigTransactionRequest) (*GetConfigTransactionResponse, error)
	// ClearConfigTransactions clears the history of configuration transactions.
	ClearConfigTransactions(context.Context, *ClearConfigTransactionsRequest) (*ClearConfigTransactionsResponse, error)
	mustEmbedUnimplementedConfigServiceServer()
}

// UnimplementedConfigServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConfigServiceServer struct{}

func (UnimplementedConfigServiceServer) ValidateConfig(context.Context, *ValidateConfigRequest) (*ValidateConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateConfig not implemented")
}
func (UnimplementedConfigServiceServer) UpdateConfig(context.Context, *UpdateConfigRequest) (*UpdateConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfig not implemented")
}
func (UnimplementedConfigServiceServer) GetConfig(context.Context, *GetConfigRequest) (*GetConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedConfigServiceServer) GetCurrentConfigTransaction(context.Context, *GetCurrentConfigTransactionRequest) (*GetCurrentConfigTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentConfigTransaction not implemented")
}
func (UnimplementedConfigServiceServer) ListConfigTransactions(context.Context, *ListConfigTransactionsRequest) (*ListConfigTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConfigTransactions not implemented")
}
func (UnimplementedConfigServiceServer) GetConfigTransaction(context.Context, *GetConfigTransactionRequest) (*GetConfigTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigTransaction not implemented")
}
func (UnimplementedConfigServiceServer) ClearConfigTransactions(context.Context, *ClearConfigTransactionsRequest) (*ClearConfigTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearConfigTransactions not implemented")
}
func (UnimplementedConfigServiceServer) mustEmbedUnimplementedConfigServiceServer() {}
func (UnimplementedConfigServiceServer) testEmbeddedByValue()                       {}

// UnsafeConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigServiceServer will
// result in compilation errors.
type UnsafeConfigServiceServer interface {
	mustEmbedUnimplementedConfigServiceServer()
}

func RegisterConfigServiceServer(s grpc.ServiceRegistrar, srv ConfigServiceServer) {
	// If the following call pancis, it indicates UnimplementedConfigServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ConfigService_ServiceDesc, srv)
}

func _ConfigService_ValidateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).ValidateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_ValidateConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).ValidateConfig(ctx, req.(*ValidateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_UpdateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).UpdateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_UpdateConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).UpdateConfig(ctx, req.(*UpdateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_GetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).GetConfig(ctx, req.(*GetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_GetCurrentConfigTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentConfigTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).GetCurrentConfigTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_GetCurrentConfigTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).GetCurrentConfigTransaction(ctx, req.(*GetCurrentConfigTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_ListConfigTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConfigTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).ListConfigTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_ListConfigTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).ListConfigTransactions(ctx, req.(*ListConfigTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_GetConfigTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).GetConfigTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_GetConfigTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).GetConfigTransaction(ctx, req.(*GetConfigTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_ClearConfigTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearConfigTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).ClearConfigTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_ClearConfigTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).ClearConfigTransactions(ctx, req.(*ClearConfigTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConfigService_ServiceDesc is the grpc.ServiceDesc for ConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "settings.v1alpha1.ConfigService",
	HandlerType: (*ConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidateConfig",
			Handler:    _ConfigService_ValidateConfig_Handler,
		},
		{
			MethodName: "UpdateConfig",
			Handler:    _ConfigService_UpdateConfig_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _ConfigService_GetConfig_Handler,
		},
		{
			MethodName: "GetCurrentConfigTransaction",
			Handler:    _ConfigService_GetCurrentConfigTransaction_Handler,
		},
		{
			MethodName: "ListConfigTransactions",
			Handler:    _ConfigService_ListConfigTransactions_Handler,
		},
		{
			MethodName: "GetConfigTransaction",
			Handler:    _ConfigService_GetConfigTransaction_Handler,
		},
		{
			MethodName: "ClearConfigTransactions",
			Handler:    _ConfigService_ClearConfigTransactions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "settings/v1alpha1/services.proto",
}

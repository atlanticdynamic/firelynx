// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: settings/v1alpha1/apps/v1/mcp.proto

package v1

import (
	v1 "github.com/atlanticdynamic/firelynx/gen/settings/v1alpha1/data/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type McpBuiltinHandler_Type int32

const (
	McpBuiltinHandler_ECHO        McpBuiltinHandler_Type = 0 // Simple echo tool for testing
	McpBuiltinHandler_CALCULATION McpBuiltinHandler_Type = 1 // Mathematical calculations
	McpBuiltinHandler_FILE_READ   McpBuiltinHandler_Type = 2 // File reading operations
)

// Enum value maps for McpBuiltinHandler_Type.
var (
	McpBuiltinHandler_Type_name = map[int32]string{
		0: "ECHO",
		1: "CALCULATION",
		2: "FILE_READ",
	}
	McpBuiltinHandler_Type_value = map[string]int32{
		"ECHO":        0,
		"CALCULATION": 1,
		"FILE_READ":   2,
	}
)

func (x McpBuiltinHandler_Type) Enum() *McpBuiltinHandler_Type {
	p := new(McpBuiltinHandler_Type)
	*p = x
	return p
}

func (x McpBuiltinHandler_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (McpBuiltinHandler_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_settings_v1alpha1_apps_v1_mcp_proto_enumTypes[0].Descriptor()
}

func (McpBuiltinHandler_Type) Type() protoreflect.EnumType {
	return &file_settings_v1alpha1_apps_v1_mcp_proto_enumTypes[0]
}

func (x McpBuiltinHandler_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use McpBuiltinHandler_Type.Descriptor instead.
func (McpBuiltinHandler_Type) EnumDescriptor() ([]byte, []int) {
	return file_settings_v1alpha1_apps_v1_mcp_proto_rawDescGZIP(), []int{4, 0}
}

type McpMiddleware_Type int32

const (
	McpMiddleware_RATE_LIMITING      McpMiddleware_Type = 0 // Native MCP rate limiting
	McpMiddleware_MCP_LOGGING        McpMiddleware_Type = 1 // MCP-specific logging
	McpMiddleware_MCP_AUTHENTICATION McpMiddleware_Type = 2 // MCP authentication
)

// Enum value maps for McpMiddleware_Type.
var (
	McpMiddleware_Type_name = map[int32]string{
		0: "RATE_LIMITING",
		1: "MCP_LOGGING",
		2: "MCP_AUTHENTICATION",
	}
	McpMiddleware_Type_value = map[string]int32{
		"RATE_LIMITING":      0,
		"MCP_LOGGING":        1,
		"MCP_AUTHENTICATION": 2,
	}
)

func (x McpMiddleware_Type) Enum() *McpMiddleware_Type {
	p := new(McpMiddleware_Type)
	*p = x
	return p
}

func (x McpMiddleware_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (McpMiddleware_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_settings_v1alpha1_apps_v1_mcp_proto_enumTypes[1].Descriptor()
}

func (McpMiddleware_Type) Type() protoreflect.EnumType {
	return &file_settings_v1alpha1_apps_v1_mcp_proto_enumTypes[1]
}

func (x McpMiddleware_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use McpMiddleware_Type.Descriptor instead.
func (McpMiddleware_Type) EnumDescriptor() ([]byte, []int) {
	return file_settings_v1alpha1_apps_v1_mcp_proto_rawDescGZIP(), []int{9, 0}
}

// MCP (Model Context Protocol) app
type McpApp struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// MCP server implementation details
	// env_interpolation: yes (server name)
	ServerName *string `protobuf:"bytes,1,opt,name=server_name,json=serverName" json:"server_name,omitempty"`
	// env_interpolation: yes (server version)
	ServerVersion *string `protobuf:"bytes,2,opt,name=server_version,json=serverVersion" json:"server_version,omitempty"`
	// MCP transport configuration
	// env_interpolation: n/a (non-string)
	Transport *McpTransport `protobuf:"bytes,3,opt,name=transport" json:"transport,omitempty"`
	// MCP tools configuration
	// env_interpolation: n/a (non-string)
	Tools []*McpTool `protobuf:"bytes,4,rep,name=tools" json:"tools,omitempty"`
	// MCP resources configuration (future phases)
	// env_interpolation: n/a (non-string)
	Resources []*McpResource `protobuf:"bytes,5,rep,name=resources" json:"resources,omitempty"`
	// MCP prompts configuration (future phases)
	// env_interpolation: n/a (non-string)
	Prompts []*McpPrompt `protobuf:"bytes,6,rep,name=prompts" json:"prompts,omitempty"`
	// MCP SDK middleware configuration
	// env_interpolation: n/a (non-string)
	Middlewares   []*McpMiddleware `protobuf:"bytes,7,rep,name=middlewares" json:"middlewares,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *McpApp) Reset() {
	*x = McpApp{}
	mi := &file_settings_v1alpha1_apps_v1_mcp_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *McpApp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*McpApp) ProtoMessage() {}

func (x *McpApp) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1alpha1_apps_v1_mcp_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use McpApp.ProtoReflect.Descriptor instead.
func (*McpApp) Descriptor() ([]byte, []int) {
	return file_settings_v1alpha1_apps_v1_mcp_proto_rawDescGZIP(), []int{0}
}

func (x *McpApp) GetServerName() string {
	if x != nil && x.ServerName != nil {
		return *x.ServerName
	}
	return ""
}

func (x *McpApp) GetServerVersion() string {
	if x != nil && x.ServerVersion != nil {
		return *x.ServerVersion
	}
	return ""
}

func (x *McpApp) GetTransport() *McpTransport {
	if x != nil {
		return x.Transport
	}
	return nil
}

func (x *McpApp) GetTools() []*McpTool {
	if x != nil {
		return x.Tools
	}
	return nil
}

func (x *McpApp) GetResources() []*McpResource {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *McpApp) GetPrompts() []*McpPrompt {
	if x != nil {
		return x.Prompts
	}
	return nil
}

func (x *McpApp) GetMiddlewares() []*McpMiddleware {
	if x != nil {
		return x.Middlewares
	}
	return nil
}

// MCP transport configuration
type McpTransport struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Enable Server-Sent Events (SSE) support for MCP protocol
	// env_interpolation: n/a (non-string)
	SseEnabled *bool `protobuf:"varint,1,opt,name=sse_enabled,json=sseEnabled" json:"sse_enabled,omitempty"`
	// SSE endpoint path when SSE is enabled
	// env_interpolation: yes (path field)
	SsePath       *string `protobuf:"bytes,2,opt,name=sse_path,json=ssePath" json:"sse_path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *McpTransport) Reset() {
	*x = McpTransport{}
	mi := &file_settings_v1alpha1_apps_v1_mcp_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *McpTransport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*McpTransport) ProtoMessage() {}

func (x *McpTransport) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1alpha1_apps_v1_mcp_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use McpTransport.ProtoReflect.Descriptor instead.
func (*McpTransport) Descriptor() ([]byte, []int) {
	return file_settings_v1alpha1_apps_v1_mcp_proto_rawDescGZIP(), []int{1}
}

func (x *McpTransport) GetSseEnabled() bool {
	if x != nil && x.SseEnabled != nil {
		return *x.SseEnabled
	}
	return false
}

func (x *McpTransport) GetSsePath() string {
	if x != nil && x.SsePath != nil {
		return *x.SsePath
	}
	return ""
}

// MCP tool definition
type McpTool struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// env_interpolation: no (tool name)
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// env_interpolation: yes (description text)
	Description *string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	// Tool implementation using existing evaluator types
	//
	// Types that are valid to be assigned to Handler:
	//
	//	*McpTool_Script
	//	*McpTool_Builtin
	Handler       isMcpTool_Handler `protobuf_oneof:"handler"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *McpTool) Reset() {
	*x = McpTool{}
	mi := &file_settings_v1alpha1_apps_v1_mcp_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *McpTool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*McpTool) ProtoMessage() {}

func (x *McpTool) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1alpha1_apps_v1_mcp_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use McpTool.ProtoReflect.Descriptor instead.
func (*McpTool) Descriptor() ([]byte, []int) {
	return file_settings_v1alpha1_apps_v1_mcp_proto_rawDescGZIP(), []int{2}
}

func (x *McpTool) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *McpTool) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *McpTool) GetHandler() isMcpTool_Handler {
	if x != nil {
		return x.Handler
	}
	return nil
}

func (x *McpTool) GetScript() *McpScriptHandler {
	if x != nil {
		if x, ok := x.Handler.(*McpTool_Script); ok {
			return x.Script
		}
	}
	return nil
}

func (x *McpTool) GetBuiltin() *McpBuiltinHandler {
	if x != nil {
		if x, ok := x.Handler.(*McpTool_Builtin); ok {
			return x.Builtin
		}
	}
	return nil
}

type isMcpTool_Handler interface {
	isMcpTool_Handler()
}

type McpTool_Script struct {
	Script *McpScriptHandler `protobuf:"bytes,10,opt,name=script,oneof"` // Script-based tool using evaluators
}

type McpTool_Builtin struct {
	Builtin *McpBuiltinHandler `protobuf:"bytes,11,opt,name=builtin,oneof"` // Built-in tool handlers
}

func (*McpTool_Script) isMcpTool_Handler() {}

func (*McpTool_Builtin) isMcpTool_Handler() {}

// Script handler reusing existing evaluator infrastructure
type McpScriptHandler struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Static data specific to this tool
	// env_interpolation: n/a (non-string)
	StaticData *v1.StaticData `protobuf:"bytes,1,opt,name=static_data,json=staticData" json:"static_data,omitempty"`
	// Reuse existing evaluator types from script app
	//
	// Types that are valid to be assigned to Evaluator:
	//
	//	*McpScriptHandler_Risor
	//	*McpScriptHandler_Starlark
	//	*McpScriptHandler_Extism
	Evaluator     isMcpScriptHandler_Evaluator `protobuf_oneof:"evaluator"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *McpScriptHandler) Reset() {
	*x = McpScriptHandler{}
	mi := &file_settings_v1alpha1_apps_v1_mcp_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *McpScriptHandler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*McpScriptHandler) ProtoMessage() {}

func (x *McpScriptHandler) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1alpha1_apps_v1_mcp_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use McpScriptHandler.ProtoReflect.Descriptor instead.
func (*McpScriptHandler) Descriptor() ([]byte, []int) {
	return file_settings_v1alpha1_apps_v1_mcp_proto_rawDescGZIP(), []int{3}
}

func (x *McpScriptHandler) GetStaticData() *v1.StaticData {
	if x != nil {
		return x.StaticData
	}
	return nil
}

func (x *McpScriptHandler) GetEvaluator() isMcpScriptHandler_Evaluator {
	if x != nil {
		return x.Evaluator
	}
	return nil
}

func (x *McpScriptHandler) GetRisor() *RisorEvaluator {
	if x != nil {
		if x, ok := x.Evaluator.(*McpScriptHandler_Risor); ok {
			return x.Risor
		}
	}
	return nil
}

func (x *McpScriptHandler) GetStarlark() *StarlarkEvaluator {
	if x != nil {
		if x, ok := x.Evaluator.(*McpScriptHandler_Starlark); ok {
			return x.Starlark
		}
	}
	return nil
}

func (x *McpScriptHandler) GetExtism() *ExtismEvaluator {
	if x != nil {
		if x, ok := x.Evaluator.(*McpScriptHandler_Extism); ok {
			return x.Extism
		}
	}
	return nil
}

type isMcpScriptHandler_Evaluator interface {
	isMcpScriptHandler_Evaluator()
}

type McpScriptHandler_Risor struct {
	Risor *RisorEvaluator `protobuf:"bytes,2,opt,name=risor,oneof"` // Reuse existing evaluators
}

type McpScriptHandler_Starlark struct {
	Starlark *StarlarkEvaluator `protobuf:"bytes,3,opt,name=starlark,oneof"`
}

type McpScriptHandler_Extism struct {
	Extism *ExtismEvaluator `protobuf:"bytes,4,opt,name=extism,oneof"`
}

func (*McpScriptHandler_Risor) isMcpScriptHandler_Evaluator() {}

func (*McpScriptHandler_Starlark) isMcpScriptHandler_Evaluator() {}

func (*McpScriptHandler_Extism) isMcpScriptHandler_Evaluator() {}

// Built-in handler for common operations
type McpBuiltinHandler struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// env_interpolation: n/a (non-string)
	Type *McpBuiltinHandler_Type `protobuf:"varint,1,opt,name=type,enum=settings.v1alpha1.apps.v1.McpBuiltinHandler_Type" json:"type,omitempty"`
	// env_interpolation: yes (config values may contain paths)
	Config        map[string]string `protobuf:"bytes,2,rep,name=config" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *McpBuiltinHandler) Reset() {
	*x = McpBuiltinHandler{}
	mi := &file_settings_v1alpha1_apps_v1_mcp_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *McpBuiltinHandler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*McpBuiltinHandler) ProtoMessage() {}

func (x *McpBuiltinHandler) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1alpha1_apps_v1_mcp_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use McpBuiltinHandler.ProtoReflect.Descriptor instead.
func (*McpBuiltinHandler) Descriptor() ([]byte, []int) {
	return file_settings_v1alpha1_apps_v1_mcp_proto_rawDescGZIP(), []int{4}
}

func (x *McpBuiltinHandler) GetType() McpBuiltinHandler_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return McpBuiltinHandler_ECHO
}

func (x *McpBuiltinHandler) GetConfig() map[string]string {
	if x != nil {
		return x.Config
	}
	return nil
}

// MCP resource definition (future phases)
type McpResource struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// env_interpolation: yes (URI field)
	Uri *string `protobuf:"bytes,1,opt,name=uri" json:"uri,omitempty"`
	// env_interpolation: yes (name field)
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// env_interpolation: yes (description text)
	Description *string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// env_interpolation: no (MIME type)
	MimeType *string `protobuf:"bytes,4,opt,name=mime_type,json=mimeType" json:"mime_type,omitempty"`
	// Types that are valid to be assigned to Source:
	//
	//	*McpResource_FilePath
	//	*McpResource_StaticContent
	//	*McpResource_Script
	Source        isMcpResource_Source `protobuf_oneof:"source"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *McpResource) Reset() {
	*x = McpResource{}
	mi := &file_settings_v1alpha1_apps_v1_mcp_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *McpResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*McpResource) ProtoMessage() {}

func (x *McpResource) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1alpha1_apps_v1_mcp_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use McpResource.ProtoReflect.Descriptor instead.
func (*McpResource) Descriptor() ([]byte, []int) {
	return file_settings_v1alpha1_apps_v1_mcp_proto_rawDescGZIP(), []int{5}
}

func (x *McpResource) GetUri() string {
	if x != nil && x.Uri != nil {
		return *x.Uri
	}
	return ""
}

func (x *McpResource) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *McpResource) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *McpResource) GetMimeType() string {
	if x != nil && x.MimeType != nil {
		return *x.MimeType
	}
	return ""
}

func (x *McpResource) GetSource() isMcpResource_Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *McpResource) GetFilePath() string {
	if x != nil {
		if x, ok := x.Source.(*McpResource_FilePath); ok {
			return x.FilePath
		}
	}
	return ""
}

func (x *McpResource) GetStaticContent() string {
	if x != nil {
		if x, ok := x.Source.(*McpResource_StaticContent); ok {
			return x.StaticContent
		}
	}
	return ""
}

func (x *McpResource) GetScript() *McpScriptResource {
	if x != nil {
		if x, ok := x.Source.(*McpResource_Script); ok {
			return x.Script
		}
	}
	return nil
}

type isMcpResource_Source interface {
	isMcpResource_Source()
}

type McpResource_FilePath struct {
	// env_interpolation: yes (file path)
	FilePath string `protobuf:"bytes,10,opt,name=file_path,json=filePath,oneof"`
}

type McpResource_StaticContent struct {
	// env_interpolation: no (static content)
	StaticContent string `protobuf:"bytes,11,opt,name=static_content,json=staticContent,oneof"`
}

type McpResource_Script struct {
	Script *McpScriptResource `protobuf:"bytes,12,opt,name=script,oneof"` // go-polyscript integration
}

func (*McpResource_FilePath) isMcpResource_Source() {}

func (*McpResource_StaticContent) isMcpResource_Source() {}

func (*McpResource_Script) isMcpResource_Source() {}

type McpScriptResource struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// env_interpolation: n/a (non-string)
	StaticData *v1.StaticData `protobuf:"bytes,1,opt,name=static_data,json=staticData" json:"static_data,omitempty"`
	// Types that are valid to be assigned to Evaluator:
	//
	//	*McpScriptResource_Risor
	//	*McpScriptResource_Starlark
	//	*McpScriptResource_Extism
	Evaluator     isMcpScriptResource_Evaluator `protobuf_oneof:"evaluator"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *McpScriptResource) Reset() {
	*x = McpScriptResource{}
	mi := &file_settings_v1alpha1_apps_v1_mcp_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *McpScriptResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*McpScriptResource) ProtoMessage() {}

func (x *McpScriptResource) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1alpha1_apps_v1_mcp_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use McpScriptResource.ProtoReflect.Descriptor instead.
func (*McpScriptResource) Descriptor() ([]byte, []int) {
	return file_settings_v1alpha1_apps_v1_mcp_proto_rawDescGZIP(), []int{6}
}

func (x *McpScriptResource) GetStaticData() *v1.StaticData {
	if x != nil {
		return x.StaticData
	}
	return nil
}

func (x *McpScriptResource) GetEvaluator() isMcpScriptResource_Evaluator {
	if x != nil {
		return x.Evaluator
	}
	return nil
}

func (x *McpScriptResource) GetRisor() *RisorEvaluator {
	if x != nil {
		if x, ok := x.Evaluator.(*McpScriptResource_Risor); ok {
			return x.Risor
		}
	}
	return nil
}

func (x *McpScriptResource) GetStarlark() *StarlarkEvaluator {
	if x != nil {
		if x, ok := x.Evaluator.(*McpScriptResource_Starlark); ok {
			return x.Starlark
		}
	}
	return nil
}

func (x *McpScriptResource) GetExtism() *ExtismEvaluator {
	if x != nil {
		if x, ok := x.Evaluator.(*McpScriptResource_Extism); ok {
			return x.Extism
		}
	}
	return nil
}

type isMcpScriptResource_Evaluator interface {
	isMcpScriptResource_Evaluator()
}

type McpScriptResource_Risor struct {
	Risor *RisorEvaluator `protobuf:"bytes,2,opt,name=risor,oneof"`
}

type McpScriptResource_Starlark struct {
	Starlark *StarlarkEvaluator `protobuf:"bytes,3,opt,name=starlark,oneof"`
}

type McpScriptResource_Extism struct {
	Extism *ExtismEvaluator `protobuf:"bytes,4,opt,name=extism,oneof"`
}

func (*McpScriptResource_Risor) isMcpScriptResource_Evaluator() {}

func (*McpScriptResource_Starlark) isMcpScriptResource_Evaluator() {}

func (*McpScriptResource_Extism) isMcpScriptResource_Evaluator() {}

// MCP prompt definition (future phases)
type McpPrompt struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// env_interpolation: no (prompt name)
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// env_interpolation: yes (description text)
	Description *string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	// Types that are valid to be assigned to Source:
	//
	//	*McpPrompt_Template
	//	*McpPrompt_Script
	Source        isMcpPrompt_Source `protobuf_oneof:"source"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *McpPrompt) Reset() {
	*x = McpPrompt{}
	mi := &file_settings_v1alpha1_apps_v1_mcp_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *McpPrompt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*McpPrompt) ProtoMessage() {}

func (x *McpPrompt) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1alpha1_apps_v1_mcp_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use McpPrompt.ProtoReflect.Descriptor instead.
func (*McpPrompt) Descriptor() ([]byte, []int) {
	return file_settings_v1alpha1_apps_v1_mcp_proto_rawDescGZIP(), []int{7}
}

func (x *McpPrompt) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *McpPrompt) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *McpPrompt) GetSource() isMcpPrompt_Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *McpPrompt) GetTemplate() string {
	if x != nil {
		if x, ok := x.Source.(*McpPrompt_Template); ok {
			return x.Template
		}
	}
	return ""
}

func (x *McpPrompt) GetScript() *McpScriptPrompt {
	if x != nil {
		if x, ok := x.Source.(*McpPrompt_Script); ok {
			return x.Script
		}
	}
	return nil
}

type isMcpPrompt_Source interface {
	isMcpPrompt_Source()
}

type McpPrompt_Template struct {
	// env_interpolation: no (template content)
	Template string `protobuf:"bytes,10,opt,name=template,oneof"`
}

type McpPrompt_Script struct {
	Script *McpScriptPrompt `protobuf:"bytes,11,opt,name=script,oneof"` // go-polyscript generated prompts
}

func (*McpPrompt_Template) isMcpPrompt_Source() {}

func (*McpPrompt_Script) isMcpPrompt_Source() {}

type McpScriptPrompt struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// env_interpolation: n/a (non-string)
	StaticData *v1.StaticData `protobuf:"bytes,1,opt,name=static_data,json=staticData" json:"static_data,omitempty"`
	// Types that are valid to be assigned to Evaluator:
	//
	//	*McpScriptPrompt_Risor
	//	*McpScriptPrompt_Starlark
	//	*McpScriptPrompt_Extism
	Evaluator     isMcpScriptPrompt_Evaluator `protobuf_oneof:"evaluator"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *McpScriptPrompt) Reset() {
	*x = McpScriptPrompt{}
	mi := &file_settings_v1alpha1_apps_v1_mcp_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *McpScriptPrompt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*McpScriptPrompt) ProtoMessage() {}

func (x *McpScriptPrompt) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1alpha1_apps_v1_mcp_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use McpScriptPrompt.ProtoReflect.Descriptor instead.
func (*McpScriptPrompt) Descriptor() ([]byte, []int) {
	return file_settings_v1alpha1_apps_v1_mcp_proto_rawDescGZIP(), []int{8}
}

func (x *McpScriptPrompt) GetStaticData() *v1.StaticData {
	if x != nil {
		return x.StaticData
	}
	return nil
}

func (x *McpScriptPrompt) GetEvaluator() isMcpScriptPrompt_Evaluator {
	if x != nil {
		return x.Evaluator
	}
	return nil
}

func (x *McpScriptPrompt) GetRisor() *RisorEvaluator {
	if x != nil {
		if x, ok := x.Evaluator.(*McpScriptPrompt_Risor); ok {
			return x.Risor
		}
	}
	return nil
}

func (x *McpScriptPrompt) GetStarlark() *StarlarkEvaluator {
	if x != nil {
		if x, ok := x.Evaluator.(*McpScriptPrompt_Starlark); ok {
			return x.Starlark
		}
	}
	return nil
}

func (x *McpScriptPrompt) GetExtism() *ExtismEvaluator {
	if x != nil {
		if x, ok := x.Evaluator.(*McpScriptPrompt_Extism); ok {
			return x.Extism
		}
	}
	return nil
}

type isMcpScriptPrompt_Evaluator interface {
	isMcpScriptPrompt_Evaluator()
}

type McpScriptPrompt_Risor struct {
	Risor *RisorEvaluator `protobuf:"bytes,2,opt,name=risor,oneof"`
}

type McpScriptPrompt_Starlark struct {
	Starlark *StarlarkEvaluator `protobuf:"bytes,3,opt,name=starlark,oneof"`
}

type McpScriptPrompt_Extism struct {
	Extism *ExtismEvaluator `protobuf:"bytes,4,opt,name=extism,oneof"`
}

func (*McpScriptPrompt_Risor) isMcpScriptPrompt_Evaluator() {}

func (*McpScriptPrompt_Starlark) isMcpScriptPrompt_Evaluator() {}

func (*McpScriptPrompt_Extism) isMcpScriptPrompt_Evaluator() {}

// MCP SDK middleware configuration
type McpMiddleware struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// env_interpolation: n/a (non-string)
	Type *McpMiddleware_Type `protobuf:"varint,1,opt,name=type,enum=settings.v1alpha1.apps.v1.McpMiddleware_Type" json:"type,omitempty"`
	// env_interpolation: yes (config values)
	Config        map[string]string `protobuf:"bytes,2,rep,name=config" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *McpMiddleware) Reset() {
	*x = McpMiddleware{}
	mi := &file_settings_v1alpha1_apps_v1_mcp_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *McpMiddleware) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*McpMiddleware) ProtoMessage() {}

func (x *McpMiddleware) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1alpha1_apps_v1_mcp_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use McpMiddleware.ProtoReflect.Descriptor instead.
func (*McpMiddleware) Descriptor() ([]byte, []int) {
	return file_settings_v1alpha1_apps_v1_mcp_proto_rawDescGZIP(), []int{9}
}

func (x *McpMiddleware) GetType() McpMiddleware_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return McpMiddleware_RATE_LIMITING
}

func (x *McpMiddleware) GetConfig() map[string]string {
	if x != nil {
		return x.Config
	}
	return nil
}

var File_settings_v1alpha1_apps_v1_mcp_proto protoreflect.FileDescriptor

const file_settings_v1alpha1_apps_v1_mcp_proto_rawDesc = "" +
	"\n" +
	"#settings/v1alpha1/apps/v1/mcp.proto\x12\x19settings.v1alpha1.apps.v1\x1a+settings/v1alpha1/data/v1/static_data.proto\x1a%settings/v1alpha1/apps/v1/risor.proto\x1a(settings/v1alpha1/apps/v1/starlark.proto\x1a&settings/v1alpha1/apps/v1/extism.proto\"\xa3\x03\n" +
	"\x06McpApp\x12\x1f\n" +
	"\vserver_name\x18\x01 \x01(\tR\n" +
	"serverName\x12%\n" +
	"\x0eserver_version\x18\x02 \x01(\tR\rserverVersion\x12E\n" +
	"\ttransport\x18\x03 \x01(\v2'.settings.v1alpha1.apps.v1.McpTransportR\ttransport\x128\n" +
	"\x05tools\x18\x04 \x03(\v2\".settings.v1alpha1.apps.v1.McpToolR\x05tools\x12D\n" +
	"\tresources\x18\x05 \x03(\v2&.settings.v1alpha1.apps.v1.McpResourceR\tresources\x12>\n" +
	"\aprompts\x18\x06 \x03(\v2$.settings.v1alpha1.apps.v1.McpPromptR\aprompts\x12J\n" +
	"\vmiddlewares\x18\a \x03(\v2(.settings.v1alpha1.apps.v1.McpMiddlewareR\vmiddlewares\"J\n" +
	"\fMcpTransport\x12\x1f\n" +
	"\vsse_enabled\x18\x01 \x01(\bR\n" +
	"sseEnabled\x12\x19\n" +
	"\bsse_path\x18\x02 \x01(\tR\assePath\"\xdb\x01\n" +
	"\aMcpTool\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12E\n" +
	"\x06script\x18\n" +
	" \x01(\v2+.settings.v1alpha1.apps.v1.McpScriptHandlerH\x00R\x06script\x12H\n" +
	"\abuiltin\x18\v \x01(\v2,.settings.v1alpha1.apps.v1.McpBuiltinHandlerH\x00R\abuiltinB\t\n" +
	"\ahandler\"\xbc\x02\n" +
	"\x10McpScriptHandler\x12F\n" +
	"\vstatic_data\x18\x01 \x01(\v2%.settings.v1alpha1.data.v1.StaticDataR\n" +
	"staticData\x12A\n" +
	"\x05risor\x18\x02 \x01(\v2).settings.v1alpha1.apps.v1.RisorEvaluatorH\x00R\x05risor\x12J\n" +
	"\bstarlark\x18\x03 \x01(\v2,.settings.v1alpha1.apps.v1.StarlarkEvaluatorH\x00R\bstarlark\x12D\n" +
	"\x06extism\x18\x04 \x01(\v2*.settings.v1alpha1.apps.v1.ExtismEvaluatorH\x00R\x06extismB\v\n" +
	"\tevaluator\"\x99\x02\n" +
	"\x11McpBuiltinHandler\x12E\n" +
	"\x04type\x18\x01 \x01(\x0e21.settings.v1alpha1.apps.v1.McpBuiltinHandler.TypeR\x04type\x12P\n" +
	"\x06config\x18\x02 \x03(\v28.settings.v1alpha1.apps.v1.McpBuiltinHandler.ConfigEntryR\x06config\x1a9\n" +
	"\vConfigEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"0\n" +
	"\x04Type\x12\b\n" +
	"\x04ECHO\x10\x00\x12\x0f\n" +
	"\vCALCULATION\x10\x01\x12\r\n" +
	"\tFILE_READ\x10\x02\"\x8c\x02\n" +
	"\vMcpResource\x12\x10\n" +
	"\x03uri\x18\x01 \x01(\tR\x03uri\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x1b\n" +
	"\tmime_type\x18\x04 \x01(\tR\bmimeType\x12\x1d\n" +
	"\tfile_path\x18\n" +
	" \x01(\tH\x00R\bfilePath\x12'\n" +
	"\x0estatic_content\x18\v \x01(\tH\x00R\rstaticContent\x12F\n" +
	"\x06script\x18\f \x01(\v2,.settings.v1alpha1.apps.v1.McpScriptResourceH\x00R\x06scriptB\b\n" +
	"\x06source\"\xbd\x02\n" +
	"\x11McpScriptResource\x12F\n" +
	"\vstatic_data\x18\x01 \x01(\v2%.settings.v1alpha1.data.v1.StaticDataR\n" +
	"staticData\x12A\n" +
	"\x05risor\x18\x02 \x01(\v2).settings.v1alpha1.apps.v1.RisorEvaluatorH\x00R\x05risor\x12J\n" +
	"\bstarlark\x18\x03 \x01(\v2,.settings.v1alpha1.apps.v1.StarlarkEvaluatorH\x00R\bstarlark\x12D\n" +
	"\x06extism\x18\x04 \x01(\v2*.settings.v1alpha1.apps.v1.ExtismEvaluatorH\x00R\x06extismB\v\n" +
	"\tevaluator\"\xaf\x01\n" +
	"\tMcpPrompt\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12\x1c\n" +
	"\btemplate\x18\n" +
	" \x01(\tH\x00R\btemplate\x12D\n" +
	"\x06script\x18\v \x01(\v2*.settings.v1alpha1.apps.v1.McpScriptPromptH\x00R\x06scriptB\b\n" +
	"\x06source\"\xbb\x02\n" +
	"\x0fMcpScriptPrompt\x12F\n" +
	"\vstatic_data\x18\x01 \x01(\v2%.settings.v1alpha1.data.v1.StaticDataR\n" +
	"staticData\x12A\n" +
	"\x05risor\x18\x02 \x01(\v2).settings.v1alpha1.apps.v1.RisorEvaluatorH\x00R\x05risor\x12J\n" +
	"\bstarlark\x18\x03 \x01(\v2,.settings.v1alpha1.apps.v1.StarlarkEvaluatorH\x00R\bstarlark\x12D\n" +
	"\x06extism\x18\x04 \x01(\v2*.settings.v1alpha1.apps.v1.ExtismEvaluatorH\x00R\x06extismB\v\n" +
	"\tevaluator\"\x9f\x02\n" +
	"\rMcpMiddleware\x12A\n" +
	"\x04type\x18\x01 \x01(\x0e2-.settings.v1alpha1.apps.v1.McpMiddleware.TypeR\x04type\x12L\n" +
	"\x06config\x18\x02 \x03(\v24.settings.v1alpha1.apps.v1.McpMiddleware.ConfigEntryR\x06config\x1a9\n" +
	"\vConfigEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"B\n" +
	"\x04Type\x12\x11\n" +
	"\rRATE_LIMITING\x10\x00\x12\x0f\n" +
	"\vMCP_LOGGING\x10\x01\x12\x16\n" +
	"\x12MCP_AUTHENTICATION\x10\x02BCZAgithub.com/atlanticdynamic/firelynx/gen/settings/v1alpha1/apps/v1b\beditionsp\xe8\a"

var (
	file_settings_v1alpha1_apps_v1_mcp_proto_rawDescOnce sync.Once
	file_settings_v1alpha1_apps_v1_mcp_proto_rawDescData []byte
)

func file_settings_v1alpha1_apps_v1_mcp_proto_rawDescGZIP() []byte {
	file_settings_v1alpha1_apps_v1_mcp_proto_rawDescOnce.Do(func() {
		file_settings_v1alpha1_apps_v1_mcp_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_settings_v1alpha1_apps_v1_mcp_proto_rawDesc), len(file_settings_v1alpha1_apps_v1_mcp_proto_rawDesc)))
	})
	return file_settings_v1alpha1_apps_v1_mcp_proto_rawDescData
}

var file_settings_v1alpha1_apps_v1_mcp_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_settings_v1alpha1_apps_v1_mcp_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_settings_v1alpha1_apps_v1_mcp_proto_goTypes = []any{
	(McpBuiltinHandler_Type)(0), // 0: settings.v1alpha1.apps.v1.McpBuiltinHandler.Type
	(McpMiddleware_Type)(0),     // 1: settings.v1alpha1.apps.v1.McpMiddleware.Type
	(*McpApp)(nil),              // 2: settings.v1alpha1.apps.v1.McpApp
	(*McpTransport)(nil),        // 3: settings.v1alpha1.apps.v1.McpTransport
	(*McpTool)(nil),             // 4: settings.v1alpha1.apps.v1.McpTool
	(*McpScriptHandler)(nil),    // 5: settings.v1alpha1.apps.v1.McpScriptHandler
	(*McpBuiltinHandler)(nil),   // 6: settings.v1alpha1.apps.v1.McpBuiltinHandler
	(*McpResource)(nil),         // 7: settings.v1alpha1.apps.v1.McpResource
	(*McpScriptResource)(nil),   // 8: settings.v1alpha1.apps.v1.McpScriptResource
	(*McpPrompt)(nil),           // 9: settings.v1alpha1.apps.v1.McpPrompt
	(*McpScriptPrompt)(nil),     // 10: settings.v1alpha1.apps.v1.McpScriptPrompt
	(*McpMiddleware)(nil),       // 11: settings.v1alpha1.apps.v1.McpMiddleware
	nil,                         // 12: settings.v1alpha1.apps.v1.McpBuiltinHandler.ConfigEntry
	nil,                         // 13: settings.v1alpha1.apps.v1.McpMiddleware.ConfigEntry
	(*v1.StaticData)(nil),       // 14: settings.v1alpha1.data.v1.StaticData
	(*RisorEvaluator)(nil),      // 15: settings.v1alpha1.apps.v1.RisorEvaluator
	(*StarlarkEvaluator)(nil),   // 16: settings.v1alpha1.apps.v1.StarlarkEvaluator
	(*ExtismEvaluator)(nil),     // 17: settings.v1alpha1.apps.v1.ExtismEvaluator
}
var file_settings_v1alpha1_apps_v1_mcp_proto_depIdxs = []int32{
	3,  // 0: settings.v1alpha1.apps.v1.McpApp.transport:type_name -> settings.v1alpha1.apps.v1.McpTransport
	4,  // 1: settings.v1alpha1.apps.v1.McpApp.tools:type_name -> settings.v1alpha1.apps.v1.McpTool
	7,  // 2: settings.v1alpha1.apps.v1.McpApp.resources:type_name -> settings.v1alpha1.apps.v1.McpResource
	9,  // 3: settings.v1alpha1.apps.v1.McpApp.prompts:type_name -> settings.v1alpha1.apps.v1.McpPrompt
	11, // 4: settings.v1alpha1.apps.v1.McpApp.middlewares:type_name -> settings.v1alpha1.apps.v1.McpMiddleware
	5,  // 5: settings.v1alpha1.apps.v1.McpTool.script:type_name -> settings.v1alpha1.apps.v1.McpScriptHandler
	6,  // 6: settings.v1alpha1.apps.v1.McpTool.builtin:type_name -> settings.v1alpha1.apps.v1.McpBuiltinHandler
	14, // 7: settings.v1alpha1.apps.v1.McpScriptHandler.static_data:type_name -> settings.v1alpha1.data.v1.StaticData
	15, // 8: settings.v1alpha1.apps.v1.McpScriptHandler.risor:type_name -> settings.v1alpha1.apps.v1.RisorEvaluator
	16, // 9: settings.v1alpha1.apps.v1.McpScriptHandler.starlark:type_name -> settings.v1alpha1.apps.v1.StarlarkEvaluator
	17, // 10: settings.v1alpha1.apps.v1.McpScriptHandler.extism:type_name -> settings.v1alpha1.apps.v1.ExtismEvaluator
	0,  // 11: settings.v1alpha1.apps.v1.McpBuiltinHandler.type:type_name -> settings.v1alpha1.apps.v1.McpBuiltinHandler.Type
	12, // 12: settings.v1alpha1.apps.v1.McpBuiltinHandler.config:type_name -> settings.v1alpha1.apps.v1.McpBuiltinHandler.ConfigEntry
	8,  // 13: settings.v1alpha1.apps.v1.McpResource.script:type_name -> settings.v1alpha1.apps.v1.McpScriptResource
	14, // 14: settings.v1alpha1.apps.v1.McpScriptResource.static_data:type_name -> settings.v1alpha1.data.v1.StaticData
	15, // 15: settings.v1alpha1.apps.v1.McpScriptResource.risor:type_name -> settings.v1alpha1.apps.v1.RisorEvaluator
	16, // 16: settings.v1alpha1.apps.v1.McpScriptResource.starlark:type_name -> settings.v1alpha1.apps.v1.StarlarkEvaluator
	17, // 17: settings.v1alpha1.apps.v1.McpScriptResource.extism:type_name -> settings.v1alpha1.apps.v1.ExtismEvaluator
	10, // 18: settings.v1alpha1.apps.v1.McpPrompt.script:type_name -> settings.v1alpha1.apps.v1.McpScriptPrompt
	14, // 19: settings.v1alpha1.apps.v1.McpScriptPrompt.static_data:type_name -> settings.v1alpha1.data.v1.StaticData
	15, // 20: settings.v1alpha1.apps.v1.McpScriptPrompt.risor:type_name -> settings.v1alpha1.apps.v1.RisorEvaluator
	16, // 21: settings.v1alpha1.apps.v1.McpScriptPrompt.starlark:type_name -> settings.v1alpha1.apps.v1.StarlarkEvaluator
	17, // 22: settings.v1alpha1.apps.v1.McpScriptPrompt.extism:type_name -> settings.v1alpha1.apps.v1.ExtismEvaluator
	1,  // 23: settings.v1alpha1.apps.v1.McpMiddleware.type:type_name -> settings.v1alpha1.apps.v1.McpMiddleware.Type
	13, // 24: settings.v1alpha1.apps.v1.McpMiddleware.config:type_name -> settings.v1alpha1.apps.v1.McpMiddleware.ConfigEntry
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_settings_v1alpha1_apps_v1_mcp_proto_init() }
func file_settings_v1alpha1_apps_v1_mcp_proto_init() {
	if File_settings_v1alpha1_apps_v1_mcp_proto != nil {
		return
	}
	file_settings_v1alpha1_apps_v1_risor_proto_init()
	file_settings_v1alpha1_apps_v1_starlark_proto_init()
	file_settings_v1alpha1_apps_v1_extism_proto_init()
	file_settings_v1alpha1_apps_v1_mcp_proto_msgTypes[2].OneofWrappers = []any{
		(*McpTool_Script)(nil),
		(*McpTool_Builtin)(nil),
	}
	file_settings_v1alpha1_apps_v1_mcp_proto_msgTypes[3].OneofWrappers = []any{
		(*McpScriptHandler_Risor)(nil),
		(*McpScriptHandler_Starlark)(nil),
		(*McpScriptHandler_Extism)(nil),
	}
	file_settings_v1alpha1_apps_v1_mcp_proto_msgTypes[5].OneofWrappers = []any{
		(*McpResource_FilePath)(nil),
		(*McpResource_StaticContent)(nil),
		(*McpResource_Script)(nil),
	}
	file_settings_v1alpha1_apps_v1_mcp_proto_msgTypes[6].OneofWrappers = []any{
		(*McpScriptResource_Risor)(nil),
		(*McpScriptResource_Starlark)(nil),
		(*McpScriptResource_Extism)(nil),
	}
	file_settings_v1alpha1_apps_v1_mcp_proto_msgTypes[7].OneofWrappers = []any{
		(*McpPrompt_Template)(nil),
		(*McpPrompt_Script)(nil),
	}
	file_settings_v1alpha1_apps_v1_mcp_proto_msgTypes[8].OneofWrappers = []any{
		(*McpScriptPrompt_Risor)(nil),
		(*McpScriptPrompt_Starlark)(nil),
		(*McpScriptPrompt_Extism)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_settings_v1alpha1_apps_v1_mcp_proto_rawDesc), len(file_settings_v1alpha1_apps_v1_mcp_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_settings_v1alpha1_apps_v1_mcp_proto_goTypes,
		DependencyIndexes: file_settings_v1alpha1_apps_v1_mcp_proto_depIdxs,
		EnumInfos:         file_settings_v1alpha1_apps_v1_mcp_proto_enumTypes,
		MessageInfos:      file_settings_v1alpha1_apps_v1_mcp_proto_msgTypes,
	}.Build()
	File_settings_v1alpha1_apps_v1_mcp_proto = out.File
	file_settings_v1alpha1_apps_v1_mcp_proto_goTypes = nil
	file_settings_v1alpha1_apps_v1_mcp_proto_depIdxs = nil
}

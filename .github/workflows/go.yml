name: Go

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          # Fetch all history for SonarQube
          fetch-depth: 0

      - name: Set up Go
        id: setup-go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: false

      - name: Cache Go modules and build
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: go-${{ runner.os }}-${{ steps.setup-go.outputs.go-version }}-${{ hashFiles('go.mod', 'go.sum') }}
          restore-keys: |
            go-${{ runner.os }}-${{ steps.setup-go.outputs.go-version }}-

      - name: Display Go version
        run: go version

      - name: go mod tidy (fails if changes are needed)
        run: go mod tidy --diff

      - name: Go test
        run: |
          go test -short -timeout 1m ./...
          # Run full test suite with coverage report for SonarQube
          go test -race -cover -coverprofile=unit.coverage.out -timeout 5m -tags "integration e2e" ./...

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=atlanticdynamic_firelynx
            -Dsonar.organization=atlanticdynamic
            -Dsonar.go.coverage.reportPaths=unit.coverage.out
            -Dsonar.sources=.
            -Dsonar.exclusions=**/*_test.go,**/gen/**,**/internal/server/integration_tests/**
            -Dsonar.tests=.
            -Dsonar.test.inclusions=**/*_test.go,**/internal/server/integration_tests/**
            -Dsonar.language=go
            -Dsonar.sourceEncoding=UTF-8

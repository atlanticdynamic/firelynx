# Headers Middleware Example Configuration
# This example demonstrates how to configure the headers middleware to manipulate
# both request and response headers in firelynx.

version = "v1"

[[listeners]]
id = "http"
address = ":8080"
type = "http"

[listeners.http]
read_timeout = "30s"
write_timeout = "30s"

[[endpoints]]
id = "main"
listener_id = "http"

# Security Headers Middleware - Add security headers to responses
[[endpoints.middlewares]]
id = "security-headers"
type = "headers"

[endpoints.middlewares.headers.response]
# Remove headers that might expose server information
remove_headers = ["Server", "X-Powered-By"]

[endpoints.middlewares.headers.response.set_headers]
# Security headers to protect against common vulnerabilities
"X-Content-Type-Options" = "nosniff"
"X-Frame-Options" = "DENY"
"X-XSS-Protection" = "1; mode=block"
"Referrer-Policy" = "strict-origin-when-cross-origin"

# Request Header Normalization Middleware - Clean up request headers
[[endpoints.middlewares]]
id = "request-cleaner"
type = "headers"

[endpoints.middlewares.headers.request]
# Remove potentially problematic proxy headers
remove_headers = ["X-Forwarded-For", "X-Real-IP"]

[endpoints.middlewares.headers.request.set_headers]
# Set a consistent client identification header
"X-Client-Source" = "firelynx"

[[endpoints.routes]]
app_id = "echo"
[endpoints.routes.http]
path_prefix = "/"

[[apps]]
id = "echo"
[apps.echo]
response = "Hello from firelynx with headers middleware!"
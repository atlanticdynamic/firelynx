# =============================================================================
# Multi-Language MCP Toolkit
# =============================================================================
#
# PURPOSE: Demonstrates a comprehensive MCP service using multiple scripting languages
# PORT: 8083  
# ENDPOINT: http://localhost:8083/mcp
#
# LANGUAGE STRATEGY:
# - Risor: Mathematical operations, unit conversions, string manipulation
# - Starlark: Data processing, schema validation, complex workflows
# - Combined: Use the best language for each specific task
#
# TOOLS PROVIDED:
# - unit_converter (Risor): Convert between units (length, weight) with built-in conversion tables
# - validate_schema (Starlark): Validate JSON data against predefined or custom schemas
#
# EXAMPLE USAGE:
# Tool: unit_converter
# Input: {"value": 5, "from": "ft", "to": "m", "category": "length"}
# Output: {"text": "5 ft = 1.52 m", "value": 1.524, "conversion": {...}}
#
# Tool: validate_schema
# Input: {"data": {"id": "123", "name": "John", "email": "john@example.com"}, "schema": "user"}
# Output: {"valid": true, "text": "Schema validation passed successfully"}
#
#
# UNIT_CONVERTER FEATURES (Risor):
# - Length conversions: mm, cm, m, km, in, ft, yd, mi
# - Weight conversions: g, kg, lb, oz, ton
# - Built-in conversion tables via static data
# - High-precision calculations with rounding
# - Comprehensive error handling for unknown units
#
# VALIDATE_SCHEMA FEATURES (Starlark):
# - Predefined schemas: "user" and "product" schemas included
# - Custom schema support: Define schemas dynamically
# - Field validation: Required fields, optional fields, type checking
# - Detailed error reporting: Missing fields, type mismatches, extra fields
# - Summary statistics: Field counts, validation results
#
#
# STATIC DATA CONFIGURATION:
# - Unit conversion tables with precise factors
# - Schema definitions with required/optional fields and types
#
# PREDEFINED SCHEMAS:
# - user: Required (id, name, email), Optional (age, address, phone)
# - product: Required (id, name, price), Optional (description, category, tags)
#
# SUPPORTED UNIT CATEGORIES:
# - length: mm, cm, m, km, in, ft, yd, mi
# - weight: g, kg, lb, oz, ton
#
#
# TO TEST:
# 1. Start server: ./bin/firelynx server -c examples/config/mcp/mcp-multi-language-toolkit.toml
# 2. Test unit_converter with various unit conversions
# 3. Test validate_schema with user/product data and custom schemas
# 4. Compare performance characteristics of each language for different tasks

[[listeners]]
id = "toolkit-listener"
address = "localhost:8083"
type = "http"

[[endpoints]]
id = "toolkit-endpoint"
listener_id = "toolkit-listener"

# Adding optional logger middleware for this endpoint
[[endpoints.middlewares]]
id = "logger"
type = "console_logger"
[endpoints.middlewares.console_logger]
preset = "debug"
output = "stdout"

[[endpoints.routes]]
app_id = "multi-toolkit"
[endpoints.routes.http]
path_prefix = "/mcp"
method = "*"

# Multi-Language MCP Toolkit Application
[[apps]]
id = "multi-toolkit"
type = "mcp"

[apps.mcp]
server_name = "Firelynx Multi-Language Toolkit"
server_version = "1.0.0"

[apps.mcp.transport]
sse_enabled = false

# =============================================================================
# RISOR TOOLS - Mathematical and String Operations
# =============================================================================

# Advanced Calculator with Unit Conversion
[[apps.mcp.tools]]
name = "unit_converter"
description = "Convert between different units using Risor with built-in conversion tables"

[apps.mcp.tools.script]
[apps.mcp.tools.script.static_data]
[apps.mcp.tools.script.static_data.length_conversions]
mm = 0.001 # to meters
cm = 0.01
m = 1.0
km = 1000.0
"in" = 0.0254 # 'in' is a keyword, so quote it
ft = 0.3048
yd = 0.9144
mi = 1609.344

[apps.mcp.tools.script.static_data.weight_conversions]
g = 0.001 # to kilograms
kg = 1.0
lb = 0.45359237
oz = 0.028349523125
ton = 1000.0

[apps.mcp.tools.script.risor]
code = '''
func convertUnits() {
    args := ctx.get("args", {})
    value := args.get("value", 0.0)
    fromUnit := args.get("from", "")
    toUnit := args.get("to", "")
    category := args.get("category", "length")
    
    if value == 0.0 {
        return {"error": "Please provide a numeric value to convert"}
    }
    
    if fromUnit == "" || toUnit == "" {
        return {"error": "Please specify both 'from' and 'to' units"}
    }
    
    conversions := {}
    unit := ""
    
    switch category {
    case "length":
        conversions = ctx.get("data", {}).get("length_conversions", {})
        unit = "meters"
    case "weight":
        conversions = ctx.get("data", {}).get("weight_conversions", {})
        unit = "kilograms"
    default:
        return {"error": "Unknown category: " + category + ". Supported: length, weight"}
    }
    
    fromFactor := conversions.get(fromUnit, nil)
    toFactor := conversions.get(toUnit, nil)
    fromOk := fromFactor != nil
    toOk := toFactor != nil
    
    if !fromOk {
        return {"error": "Unknown source unit: " + fromUnit}
    }
    if !toOk {
        return {"error": "Unknown target unit: " + toUnit}
    }

    // Convert: input → base unit → target unit
    baseValue := value * fromFactor
    result := baseValue / toFactor
    
    // Format result for display - round to 2 decimal places for most cases
    displayResult := result
    if result != math.round(result) {
        // Round to 2 decimal places by multiplying by 100, rounding, then dividing
        displayResult = math.round(result * 100) / 100
    }

    // Format input value for display
    displayValue := value
    if value >= 1000000 {
        // Use scientific notation for large numbers
        displayValue = value
    }

    return {
        "text": string(displayValue) + " " + fromUnit + " = " + string(displayResult) + " " + toUnit,
        "value": result,
        "conversion": {
            "input": {"value": value, "unit": fromUnit},
            "output": {"value": result, "unit": toUnit},
            "category": category,
            "base_value": baseValue,
            "base_unit": unit
        }
    }
}

convertUnits()
'''

# =============================================================================
# STARLARK TOOLS - Data Processing and Analysis
# =============================================================================

# Advanced JSON Schema Validator
[[apps.mcp.tools]]
name = "validate_schema"
description = "Validate JSON data against schemas using Starlark"

[apps.mcp.tools.script]
[apps.mcp.tools.script.static_data]
[apps.mcp.tools.script.static_data.common_schemas.user]
required_fields = ["id", "name", "email"]
optional_fields = ["age", "address", "phone"]

[apps.mcp.tools.script.static_data.common_schemas.user.field_types]
id = "string"
name = "string"
email = "string"
age = "number"
phone = "string"

[apps.mcp.tools.script.static_data.common_schemas.product]
required_fields = ["id", "name", "price"]
optional_fields = ["description", "category", "tags"]

[apps.mcp.tools.script.static_data.common_schemas.product.field_types]
id = "string"
name = "string"
price = "number"
description = "string"
category = "string"
tags = "list"

[apps.mcp.tools.script.starlark]
code = '''
def validate_schema():
    """Validate JSON data against predefined or custom schemas"""
    
    args = ctx.get("args", {})
    data = args.get("data", {})
    schema_name = args.get("schema", "")
    custom_schema = args.get("custom_schema", {})
    
    if not data:
        return {"error": "No data provided for validation"}
    
    # Get schema definition
    schema = None
    if schema_name:
        common_schemas = ctx.get("data", {}).get("common_schemas", {})
        if schema_name in common_schemas:
            schema = common_schemas[schema_name]
        else:
            return {"error": "Unknown schema: {}. Available: {}".format(
                schema_name, ", ".join(sorted(common_schemas.keys())))}
    elif custom_schema:
        schema = custom_schema
    else:
        return {"error": "Please specify either a 'schema' name or 'custom_schema' definition"}
    
    # Validation results
    errors = []
    warnings = []
    missing_required = []
    extra_fields = []
    type_errors = []
    
    required_fields = schema.get("required_fields", [])
    optional_fields = schema.get("optional_fields", [])
    field_types = schema.get("field_types", {})
    
    all_allowed_fields = required_fields + optional_fields
    
    # Check required fields
    for field in required_fields:
        if field not in data:
            missing_required.append(field)
    
    # Check for extra fields
    for field in data.keys():
        if field not in all_allowed_fields:
            extra_fields.append(field)
    
    # Check field types
    for field, expected_type in field_types.items():
        if field in data:
            actual_type = type(data[field])
            
            # Map Python types to schema types
            type_mapping = {
                "string": "string",
                "int": "number",
                "float": "number", 
                "bool": "boolean",
                "list": "list",
                "dict": "object"
            }
            
            mapped_type = type_mapping.get(actual_type, actual_type)
            if mapped_type != expected_type:
                type_errors.append({
                    "field": field,
                    "expected": expected_type,
                    "actual": mapped_type,
                    "value": str(data[field])[:50]  # Truncate long values
                })
    
    # Compile validation results
    if missing_required:
        errors.append("Missing required fields: {}".format(", ".join(missing_required)))
    
    if type_errors:
        for err in type_errors:
            errors.append("Field '{}' should be {} but got {}: {}".format(
                err["field"], err["expected"], err["actual"], err["value"]))
    
    if extra_fields:
        warnings.append("Extra fields found: {}".format(", ".join(extra_fields)))
    
    # Generate result
    is_valid = len(errors) == 0
    
    result = {
        "valid": is_valid,
        "errors": errors,
        "warnings": warnings,
        "summary": {
            "total_fields": len(data),
            "required_present": len(required_fields) - len(missing_required),
            "required_total": len(required_fields),
            "extra_fields": len(extra_fields),
            "type_errors": len(type_errors)
        }
    }
    
    if is_valid:
        result["text"] = "Schema validation passed successfully"
    else:
        result["text"] = "Schema validation failed with {} errors".format(len(errors))
    
    return result

_ = validate_schema()
'''
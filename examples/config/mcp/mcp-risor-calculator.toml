# MCP Calculator Service using Risor
# This example demonstrates a mathematical calculator MCP tool using Risor (Go-like syntax)

[[listeners]]
id = "mcp-listener"
address = ":8080"
type = "http"

[[endpoints]]
id = "mcp-endpoint"
listener_id = "mcp-listener"

# Route MCP requests to the calculator app
[[endpoints.routes]]
app_id = "calculator-service"
[endpoints.routes.http]
path_prefix = "/mcp"
method = "*"

# MCP Calculator Application
[[apps]]
id = "calculator-service"
type = "mcp"

[apps.mcp]
server_name = "Firelynx Calculator Service"
server_version = "1.0.0"

# Transport configuration (HTTP only for now)
[apps.mcp.transport]
sse_enabled = false

# Mathematical Calculator Tool
[[apps.mcp.tools]]
name = "calculate"
description = "Perform mathematical calculations with support for basic arithmetic operations"

[apps.mcp.tools.script]
# Tool-level configuration
[apps.mcp.tools.script.static_data]
max_result = 1000000
precision = "high"
allowed_operations = ["add", "subtract", "multiply", "divide", "power", "sqrt"]

# Risor script implementation
[apps.mcp.tools.script.risor]
code = '''
// Mathematical calculator using Risor
func calculate() {
    // Get the mathematical expression from MCP arguments
    args := ctx.get("args", {})
    expression := args.get("expression", "")
    if expression == "" {
        return {"error": "Expression is required. Example: '2 + 3' or '10 * 5'"}
    }
    
    // Get configuration from static data
    maxResult := ctx.get("max_result", 1000000)
    precision := ctx.get("precision", "normal")
    allowedOps := ctx.get("allowed_operations", [])
    
    // Parse and validate the expression
    parts := strings.split(expression, " ")
    if len(parts) != 3 {
        return {"error": "Invalid expression format. Use: 'number operator number' (e.g., '5 + 3')"}
    }
    
    // Parse operands
    a := strconv.parse_float(parts[0])
    c := strconv.parse_float(parts[2])
    
    operator := parts[1]
    result := 0.0
    
    // Perform calculation based on operator
    switch operator {
    case "+":
        result = a + c
    case "-":
        result = a - c
    case "*":
        result = a * c
    case "/":
        if c == 0.0 {
            return {"error": "Division by zero is not allowed"}
        }
        result = a / c
    case "^", "**":
        result = math.pow(a, c)
    default:
        return {"error": "Unsupported operator: " + operator + ". Supported: +, -, *, /, ^"}
    }
    
    // Check result limits
    if result > maxResult {
        return {"error": "Result exceeds maximum allowed value of " + string(maxResult)}
    }
    
    // Format response based on precision setting
    if precision == "high" {
        return {
            "text": "Result: " + string(result),
            "calculation": expression + " = " + string(result),
            "precision": precision,
            "metadata": {
                "operand_1": a,
                "operator": operator,
                "operand_2": c,
                "result": result
            }
        }
    } else {
        return {"text": string(result)}
    }
}

// Execute the calculation
calculate()
'''


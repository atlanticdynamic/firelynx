# Sample firelynx configuration file
version = "v1"

[logging]
level = "info"
format = "json"

# --- Listeners ---

[[listeners]]
id = "http-main"
address = ":8080"
type = "http"

[listeners.http]
read_timeout = "5s"
write_timeout = "10s"
drain_timeout = "30s"

[[listeners]]
id = "http-internal"
address = ":50051"
type = "http"

[listeners.http]
read_timeout = "30s"
write_timeout = "30s"
drain_timeout = "30s"

# --- Endpoints ---

[[endpoints]]
id = "public-api"
listener_id = "http-main"

# Route /api/v1/users to the user-service app
[[endpoints.routes]]
app_id = "user-service"
[endpoints.routes.http]
path_prefix = "/api/v1/users"

# Route /api/v1/products to the product-service app
[[endpoints.routes]]
app_id = "product-service"
[endpoints.routes.http]
path_prefix = "/api/v1/products"

# Route /api/v1/orders to the composite order-processor app
[[endpoints.routes]]
app_id = "order-processor"
[endpoints.routes.http]
path_prefix = "/api/v1/orders"

[[endpoints]]
id = "internal-services"
listener_id = "http-internal"

# Route HTTP path '/api/internal/inventory' to inventory-app
[[endpoints.routes]]
app_id = "inventory-app"
[endpoints.routes.http]
path_prefix = "/api/internal/inventory"

# --- Applications ---

# User Service (Risor)
[[apps]]
id = "user-service"

[apps.script]

[apps.script.static_data]
data = { db_connection = "user_db_conn_string", cache_ttl = "300s" } # Changed from 5m
merge_mode = "last" # Default, can be omitted

[apps.script.risor]
code = """
    import "http"
    import "json"

    func handler(req http.Request) http.Response {
        # Example: Access static data
        db_conn = req.static_data.db_connection
        # ... logic to handle user requests using db_conn ...
        return http.Response{
            StatusCode: 200,
            Body: json.marshal({ "user_id": "123", "name": "Alice" }),
            Header: {"Content-Type": ["application/json"]},
        }
    }
    export default: handler
"""
timeout = "0.5s"

# Product Service (Starlark)
[[apps]]
id = "product-service"

[apps.script]

[apps.script.static_data]
data = { api_key = "prod_api_key_xyz", discount_rate = 0.1 }

[apps.script.starlark]
code = """
load("@stdlib/json", "json")
load("@stdlib/http", "http")

def handler(req):
    # Example: Access static data
    api_key = req.static_data["api_key"]
    # ... logic to handle product requests ...
    return http.Response(
        status_code=200,
        body=json.marshal({"product_id": "p456", "name": "Widget"}),
        header={"Content-Type": ["application/json"]},
    )

def main(req):
    return handler(req)
"""
timeout = "1s"

# Inventory Service (Extism - Placeholder)
[[apps]]
id = "inventory-app"

[apps.script]

[apps.script.extism]
# code = "path/to/inventory_plugin.wasm"
code = """(module)""" # Placeholder WASM
entrypoint = "handle_http"

# Order Processor (Composite)
[[apps]]
id = "order-processor"

[apps.composite_script]
script_app_ids = ["user-service", "product-service", "inventory-app"]

[apps.composite_script.static_data]
data = { order_queue = "orders_topic", notification_service = "email" }
merge_mode = "unique" # Example: Ensure unique keys if scripts provide overlapping static data
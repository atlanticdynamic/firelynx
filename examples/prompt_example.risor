// Example MCP prompt implementation in Risor

// Access arguments from ctx
language := ctx.get("language", "go")
level := ctx.get("level", "beginner")
topic := ctx.get("topic", "basics")

// Build the prompt based on the arguments
prompt := "# Programming Tutorial Generator\n\n"
prompt += "Please create a tutorial with the following parameters:\n\n"
prompt += "- Programming language: " + language + "\n"
prompt += "- Difficulty level: " + level + "\n"
prompt += "- Topic: " + topic + "\n\n"

// Add language-specific instructions
if language == "go" {
  prompt += "Include examples with proper error handling.\n"
  prompt += "Follow Go's idiomatic coding style.\n"
} else if language == "python" {
  prompt += "Include examples following PEP 8 guidelines.\n"
  prompt += "Show both functional and object-oriented approaches where applicable.\n"
} else if language == "javascript" {
  prompt += "Include modern ES6+ syntax.\n"
  prompt += "Show examples using both async/await and promises where applicable.\n"
}

// Add level-specific instructions
if level == "beginner" {
  prompt += "\nExplain concepts from first principles.\n"
  prompt += "Include detailed explanations of basic syntax and concepts.\n"
} else if level == "intermediate" {
  prompt += "\nAssume basic familiarity with the language.\n"
  prompt += "Focus on practical applications and patterns.\n"
} else if level == "advanced" {
  prompt += "\nFocus on advanced concepts and optimizations.\n"
  prompt += "Include performance considerations and best practices.\n"
}

// Return the formatted prompt
return {
  "title": language + " " + topic + " Tutorial (" + level + ")",
  "content": prompt,
  "metadata": {
    "language": language,
    "level": level,
    "topic": topic
  }
}
